from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

(LOCATION_FROM, LOCATION_TO, ROOMS, ELEVATOR, SERVICES) = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–µ–∑–¥–∞. –û—Ç–∫—É–¥–∞ –≤—ã–µ–∑–∂–∞–µ—à—å?")
    return LOCATION_FROM

async def location_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['location_from'] = update.message.text
    await update.message.reply_text("–ö—É–¥–∞ –ø–µ—Ä–µ–µ–∑–∂–∞–µ—à—å?")
    return LOCATION_TO

async def location_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['location_to'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?")
    return ROOMS

async def rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rooms'] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –ª–∏—Ñ—Ç?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return ELEVATOR

async def elevator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['elevator'] = update.message.text
    await update.message.reply_text("–ù—É–∂–Ω—ã –ª–∏ –¥–æ–ø. —É—Å–ª—É–≥–∏ (—É–ø–∞–∫–æ–≤–∫–∞, —Ä–∞–∑–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ –∏ —Ç.–¥.)?")
    return SERVICES

async def services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['services'] = update.message.text
    base_price = 300
    try:
        base_price += int(context.user_data['rooms']) * 100
    except:
        pass
    if context.user_data['elevator'].lower() == "–Ω–µ—Ç":
        base_price += 50
    if "—É–ø–∞–∫–æ–≤–∫–∞" in context.user_data['services'].lower():
        base_price += 100

    text = (
        f"üì¶ –ü–µ—Ä–µ–µ–∑–¥ –∏–∑: {context.user_data['location_from']}\n"
"
        f"üìç –í: {context.user_data['location_to']}
"
        f"üè† –ö–æ–º–Ω–∞—Ç: {context.user_data['rooms']}
"
        f"üõó –õ–∏—Ñ—Ç: {context.user_data['elevator']}
"
        f"üß∞ –£—Å–ª—É–≥–∏: {context.user_data['services']}

"
        f"üíµ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${base_price}"
    )
    await update.message.reply_text(text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("8046912572:AAHT44deUUK7Hael7QuHuZJszwkKrn16sOE").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOCATION_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_from)],
            LOCATION_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_to)],
            ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rooms)],
            ELEVATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, elevator)],
            SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, services)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
